Для реализации локального сглаживания данных по методу наименьших квадратов в MATLAB, мы будем использовать многочлен для аппроксимации данных в заданном окне. Давайте пошагово разберем этот процесс.

### Шаги реализации локального сглаживания в MATLAB

1. Генерация данных: Для начала сгенерируем опытные данные с добавленным шумом.

2. Выбор окна сглаживания: Укажем размер окна, в котором будем использовать значения для аппроксимации.

3. Цикл по каждой точке: Для каждой точки в наборе данных мы будем:
   - Выбирать k соседних значений с обеих сторон от текущей точки.
   - Применять метод наименьших квадратов для получения коэффициентов многочлена.
   - Вычислять значение многочлена в текущей точке.

4. Обработка краевых условий: Для первых и последних k точек нам нужно будет учитывать крайние точки, чтобы избежать выхода за пределы массива.

5. Визуализация результатов: Сравним исходные и сглаженные данные.

### Пример кода в MATLAB

% Шаг 1: Генерация данных
x = linspace(0, 10, 100);
y = sin(x) + randn(size(x)) * 0.1; % Исходные данные с шумом

% Шаг 2: Параметры сглаживания
k = 5; % Количество соседей
n = 2; % Степень многочлена

% Инициализация массива для сглаженных значений
smoothedY = zeros(size(y));

% Шаг 3: Цикл по каждой точке
for i = 1:length(x)
    % Определение индексов для подвыборки
    lowerBound = max(1, i - k); % Нижняя граница с учетом крайних точек
    upperBound = min(length(x), i + k); % Верхняя граница с учетом крайних точек
    
    % Получаем подвыборку данных
    x_subset = x(lowerBound:upperBound);
    y_subset = y(lowerBound:upperBound);
    
    % Шаг 4: Метод наименьших квадратов
    % Строим матрицу дизайн
    X = zeros(length(x_subset), n + 1);
    for j = 0:n
        X(:, j + 1) = x_subset.^(j);
    end
    
    % Находим коэффициенты многочлена
    coeffs = (X' * X) \ (X' * y_subset'); % Решение системы уравнений
    
    % Вычисляем сглаженное значение для текущей точки
    smoothedY(i) = X(1, :) * coeffs; % Применяем многочлен на текущем x
end

% Шаг 5: Визуализация
figure;
plot(x, y, 'r.', 'DisplayName', 'Исходные данные с шумом'); % Исходные данные
hold on;
plot(x, smoothedY, 'b-', 'LineWidth', 2, 'DisplayName', 'Сглаженные данные'); % Сглаженные данные
hold off;
title('Локальное сглаживание данных методом наименьших квадратов');
xlabel('x');
ylabel('y');
legend show;
grid on;


### Объяснение кода

- Генерация данных: Мы создаём массив x от 0 до 10 и вычисляем значение y, добавляя к синусоидальным данным случайный шум.

- Выбор окна сглаживания: Указываем значение k — количество соседних точек, которые будут использованы для каждого расчета сглаженного значения, и n — степень многочлена.

- Цикл по каждой точке:
  - В каждой итерации мы определяем границы подвыборки: lowerBound и upperBound для текущей точки i.
  - Извлекаем подмассивы x_subset и y_subset, которые содержат значения, ближайшие к текущей точке.
  - Создаем матрицу дизайн X, которая соответствует многочлену заданной степени.
  - Необходимо решить систему уравнений для нахождения коэффициентов многочлена с помощью формулы наименьших квадратов.
  
- Обработка краевых условий: Мы учитываем ограничения при определении пределов, чтобы избежать выхода за границы массива.

- Сглаженные значения: Каждое сглаженное значение для точки x(i) вычисляется путем умножения матрицы X(1,:) на коэффициенты coeffs.

- Визуализация: Рисуем исходные данные и сглаженные данные на одном графике для наглядности.

Этот подход позволяет получить сглаженные данные, которые меньше подвержены шуму и лучше отражают истинные зависимости.
